{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2025-07-28T12:53:18.349Z",
    "end": "2025-07-28T12:53:20.666Z",
    "duration": 2317,
    "testsRegistered": 6,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c95b66f3-66f2-46e6-917f-6497125adb00",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\users\\users-api.cy.js",
      "file": "cypress\\e2e\\api\\users\\users-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8bf063b0-c77b-41d9-be04-a57bd7cbcd6f",
          "title": "API de Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve listar todos os usuários",
              "fullTitle": "API de Usuários deve listar todos os usuários",
              "timedOut": null,
              "duration": 67,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', `${API_URL}/users`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array');\n  // Verifica se há pelo menos um usuário\n  expect(response.body.length).to.be.greaterThan(0);\n  // Verifica a estrutura de um usuário\n  const firstUser = response.body[0];\n  expect(firstUser).to.have.property('id');\n  expect(firstUser).to.have.property('name');\n  expect(firstUser).to.have.property('email');\n  cy.log(`Encontrados ${response.body.length} usuários`);\n});",
              "err": {},
              "uuid": "b67c7b3b-230c-4aef-8a01-6f3beb79def7",
              "parentUUID": "8bf063b0-c77b-41d9-be04-a57bd7cbcd6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve criar um novo usuário",
              "fullTitle": "API de Usuários deve criar um novo usuário",
              "timedOut": null,
              "duration": 1145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: 'Novo Usuário Teste',\n  email: `test.${Date.now()}@example.com`\n};\ncy.request('POST', `${API_URL}/users`, newUser).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('id');\n  expect(response.body.name).to.eq(newUser.name);\n  expect(response.body.email).to.eq(newUser.email);\n  // Salva o ID para uso em outros testes\n  userId = response.body.id;\n  cy.log(`Usuário criado com ID: ${userId}`);\n});",
              "err": {},
              "uuid": "c21e92f5-211e-4052-b2a9-e6208fe9e1e4",
              "parentUUID": "8bf063b0-c77b-41d9-be04-a57bd7cbcd6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve buscar um usuário por ID",
              "fullTitle": "API de Usuários deve buscar um usuário por ID",
              "timedOut": null,
              "duration": 47,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userId) {\n  cy.log('Nenhum usuário disponível para teste');\n  return;\n}\ncy.request('GET', `${API_URL}/users/${userId}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(userId);\n});",
              "err": {},
              "uuid": "2803bddb-5fbd-476a-bc6c-4995ffa8d0e1",
              "parentUUID": "8bf063b0-c77b-41d9-be04-a57bd7cbcd6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve atualizar um usuário existente",
              "fullTitle": "API de Usuários deve atualizar um usuário existente",
              "timedOut": null,
              "duration": 203,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (!userId) {\n  cy.log('Nenhum usuário disponível para teste');\n  return;\n}\nconst updatedUser = {\n  name: 'Usuário Atualizado',\n  email: `updated.${Date.now()}@example.com`\n};\ncy.request('PUT', `${API_URL}/users/${userId}`, updatedUser).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.name).to.eq(updatedUser.name);\n  expect(response.body.email).to.eq(updatedUser.email);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Usuário Atualizado'",
                "estack": "AssertionError: expected undefined to equal 'Usuário Atualizado'\n    at Context.eval (webpack:///./cypress/e2e/api/users/users-api.cy.js:72:36)\n    at getRet (http://localhost:3000/__cypress/runner/cypress_runner.js:120949:20)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:3000/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:3000/__cypress/runner/cypress_runner.js:120960:66)\n    at Context.then (http://localhost:3000/__cypress/runner/cypress_runner.js:121211:21)",
                "diff": null
              },
              "uuid": "a3655079-7581-4fdd-b943-666781244604",
              "parentUUID": "8bf063b0-c77b-41d9-be04-a57bd7cbcd6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve excluir um usuário existente",
              "fullTitle": "API de Usuários deve excluir um usuário existente",
              "timedOut": null,
              "duration": 67,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!userId) {\n  cy.log('Nenhum usuário disponível para teste');\n  return;\n}\ncy.request('DELETE', `${API_URL}/users/${userId}`).then(response => {\n  expect(response.status).to.eq(200);\n  // Verifica se o usuário foi realmente excluído\n  cy.request({\n    method: 'GET',\n    url: `${API_URL}/users/${userId}`,\n    failOnStatusCode: false\n  }).then(response => {\n    expect(response.status).to.eq(404);\n  });\n});",
              "err": {},
              "uuid": "fe69d5f6-95e6-4bb7-a95a-0a9654ac4db9",
              "parentUUID": "8bf063b0-c77b-41d9-be04-a57bd7cbcd6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar erro 404 para usuário inexistente",
              "fullTitle": "API de Usuários deve retornar erro 404 para usuário inexistente",
              "timedOut": null,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentUserId = 99999;\ncy.request({\n  method: 'GET',\n  url: `${API_URL}/users/${nonExistentUserId}`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "109e2fbd-bfcf-4ae3-b6ba-4cb9f1c3fa7d",
              "parentUUID": "8bf063b0-c77b-41d9-be04-a57bd7cbcd6f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b67c7b3b-230c-4aef-8a01-6f3beb79def7",
            "c21e92f5-211e-4052-b2a9-e6208fe9e1e4",
            "2803bddb-5fbd-476a-bc6c-4995ffa8d0e1",
            "fe69d5f6-95e6-4bb7-a95a-0a9654ac4db9",
            "109e2fbd-bfcf-4ae3-b6ba-4cb9f1c3fa7d"
          ],
          "failures": [
            "a3655079-7581-4fdd-b943-666781244604"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1558,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}
{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2025-07-28T12:52:43.683Z",
    "end": "2025-07-28T12:52:45.320Z",
    "duration": 1637,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5286f58d-6585-4423-8f08-3699d7a58763",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\health-check.cy.js",
      "file": "cypress\\e2e\\api\\health-check.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2ed7f6d3-744f-4e76-b9a2-51b3e553ec30",
          "title": "Health Check - API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve retornar a lista de usuários",
              "fullTitle": "Health Check - API deve retornar a lista de usuários",
              "timedOut": null,
              "duration": 168,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${API_BASE_URL}/users`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array');\n  cy.log(`Encontrados ${response.body.length} usuários`);\n});",
              "err": {},
              "uuid": "2960b3dd-a110-49f2-96e6-e953e7073b73",
              "parentUUID": "2ed7f6d3-744f-4e76-b9a2-51b3e553ec30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar a lista de tickets",
              "fullTitle": "Health Check - API deve retornar a lista de tickets",
              "timedOut": null,
              "duration": 213,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${API_BASE_URL}/tickets`,\n  failOnStatusCode: false\n}).then(response => {\n  // Pode retornar 200 (com array vazio) ou 404 se o endpoint não existir\n  expect([200, 404]).to.include(response.status);\n  if (response.status === 200) {\n    expect(response.body).to.be.an('array');\n    cy.log(`Encontrados ${response.body.length} tickets`);\n  }\n});",
              "err": {
                "message": "AssertionError: expected [ 200, 404 ] to include 500",
                "estack": "AssertionError: expected [ 200, 404 ] to include 500\n    at Context.eval (webpack:///./cypress/e2e/api/health-check.cy.js:23:28)\n    at getRet (http://localhost:3000/__cypress/runner/cypress_runner.js:120949:20)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:3000/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:3000/__cypress/runner/cypress_runner.js:120960:66)\n    at Context.then (http://localhost:3000/__cypress/runner/cypress_runner.js:121211:21)",
                "diff": null
              },
              "uuid": "5408b7d9-2b5d-491d-8ff3-27be372d0a2a",
              "parentUUID": "2ed7f6d3-744f-4e76-b9a2-51b3e553ec30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar 404 para rota inexistente",
              "fullTitle": "Health Check - API deve retornar 404 para rota inexistente",
              "timedOut": null,
              "duration": 40,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${API_BASE_URL}/rota-inexistente`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "f35365ce-8702-4387-a010-0c5ee77b933f",
              "parentUUID": "2ed7f6d3-744f-4e76-b9a2-51b3e553ec30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2960b3dd-a110-49f2-96e6-e953e7073b73",
            "f35365ce-8702-4387-a010-0c5ee77b933f"
          ],
          "failures": [
            "5408b7d9-2b5d-491d-8ff3-27be372d0a2a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 421,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}